 {
 Reduced tree version of https://raw.githubusercontent.com/qt4cg/qtspecs/master/specifications/grammar-40/xpath-grammar.xml 
    Generated at 2024 Nov 04 @ 12:51  
} 
ixml version "1.1".
 {Grammar for XQuery 4.0 
Generated from https://raw.githubusercontent.com/qt4cg/qtspecs/master/specifications/grammar-40/xpath-grammar.xml 
at 2024 Nov 04 @ 12:51 
} 
 {Module altered to permit leading whitespace} 
                       Module: s, VersionDecl?, (LibraryModule; MainModule).
                  VersionDecl: -"xquery", RS, ("encoding", RS, StringLiteral; "version", RS, StringLiteral, ("encoding", RS, StringLiteral)?), Separator.
                   MainModule: Prolog, QueryBody.
                LibraryModule: ModuleDecl, Prolog.
                   ModuleDecl: -"module", RS, -"namespace", s, NCName, -"=", s, URILiteral, Separator.
                       Prolog: ((DefaultNamespaceDecl; Setter; NamespaceDecl; Import), Separator)*, ((ContextValueDecl; AnnotatedDecl; OptionDecl), Separator)*.
                    Separator: -";", s.
                      -Setter: BoundarySpaceDecl |
                               DefaultCollationDecl |
                               BaseURIDecl |
                               ConstructionDecl |
                               OrderingModeDecl |
                               EmptyOrderDecl |
                               CopyNamespacesDecl |
                               DecimalFormatDecl.
            BoundarySpaceDecl: -"declare", RS, -"boundary-space", RS, ("preserve", s; "strip", s).
         DefaultCollationDecl: -"declare", RS, -"default", RS, -"collation", RS, URILiteral.
                  BaseURIDecl: -"declare", RS, -"base-uri", RS, URILiteral.
             ConstructionDecl: -"declare", RS, -"construction", RS, ("strip", s; "preserve", s).
             OrderingModeDecl: -"declare", RS, -"ordering", RS, ("ordered", s; "unordered", s).
               EmptyOrderDecl: -"declare", RS, -"default", RS, -"order", RS, -"empty", RS, ("greatest", s; "least", s).
           CopyNamespacesDecl: -"declare", RS, -"copy-namespaces", RS, PreserveMode, -",", s, InheritMode.
                 PreserveMode: "preserve", s |
                               "no-preserve", s.
                  InheritMode: "inherit", s |
                               "no-inherit", s.
            DecimalFormatDecl: -"declare", RS, ("decimal-format", RS, OPT-EQName; "default", RS, "decimal-format", RS), (DFPropertyName, "=", s, StringLiteral)*.
               DFPropertyName: "decimal-separator", s |
                               "grouping-separator", s |
                               "infinity", s |
                               "minus-sign", s |
                               "NaN", s |
                               "percent", s |
                               "per-mille", s |
                               "zero-digit", s |
                               "digit", s |
                               "pattern-separator", s |
                               "exponent-separator", s.
                      -Import: SchemaImport |
                               ModuleImport.
                 SchemaImport: -"import", RS, -"schema", RS, SchemaPrefix?, URILiteral, (-"at", RS, URILiteral++(",", s))?.
                 SchemaPrefix: "namespace", s, NCName, "=", s |
                               ("fixed", RS)?, "default", RS, -"element", s, "namespace", s.
                 ModuleImport: -"import", RS, -"module", RS, ("namespace", s, NCName, "=", s)?, URILiteral, (-"at", RS, URILiteral++(",", s))?.
                NamespaceDecl: -"declare", RS, -"namespace", s, NCName, -"=", s, URILiteral.
         DefaultNamespaceDecl: -"declare", RS, ("fixed", RS)?, -"default", RS, (-"element", s; -"function", s), -"namespace", s, URILiteral.
                AnnotatedDecl: -"declare", RS, Annotation*, (VarDecl; FunctionDecl; ItemTypeDecl; NamedRecordTypeDecl).
                   Annotation: -"%", s, OPT-EQName, (-"(", s, OPT-AnnotationValue++(",", s), -")", s)?.
         -OPT-AnnotationValue: StringLiteral |
                               AnnotationValue.
              AnnotationValue: ("-", s)?, NumericLiteral |
                               "true", s, -"(", s, -")", s |
                               "false", s, -"(", s, -")", s.
                      VarDecl: -"variable", RS, VarNameAndType, (-":=", s, VarValue; "external", s, (-":=", s, VarDefaultValue)?).
                    -VarValue: ExprSingle.
             -VarDefaultValue: ExprSingle.
             ContextValueDecl: -"declare", RS, -"context", RS, ("value", RS, (-"as", RS, SequenceType)?; -"item", RS, (-"as", RS, ItemType)?), (-":=", s, VarValue; "external", s, (-":=", s, VarDefaultValue)?).
                 FunctionDecl: -"function", s, OPT-EQName, -"(", s, OPT-ParamListWithDefaults?, -")", s, TypeDeclaration?, (FunctionBody; "external", s).
            FunctionSignature: -"(", s, ParamList, -")", s, TypeDeclaration?.
   -OPT-ParamListWithDefaults: OPT-ParamWithDefault |
                               ParamListWithDefaults.
        ParamListWithDefaults: OPT-ParamWithDefault, (",", s), OPT-ParamWithDefault++(",", s).
        -OPT-ParamWithDefault: VarNameAndType |
                               ParamWithDefault.
             ParamWithDefault: VarNameAndType, -":=", s, ExprSingle.
                    ParamList: VarNameAndType**(",", s).
                 FunctionBody: EnclosedExpr, s.
                 EnclosedExpr: -"{", s, OPT-Expr?, -"}".
                 ItemTypeDecl: -"type", RS, OPT-EQName, -"as", RS, ItemType.
          NamedRecordTypeDecl: -"record", RS, OPT-EQName, -"(", s, OPT-ExtendedFieldDeclaration++(",", s), ExtensibleFlag?, -")", s.
-OPT-ExtendedFieldDeclaration: FieldDeclaration |
                               ExtendedFieldDeclaration.
     ExtendedFieldDeclaration: FieldDeclaration, -":=", s, ExprSingle.
                   OptionDecl: -"declare", RS, -"option", RS, OPT-EQName, StringLiteral.
                   -QueryBody: OPT-Expr.
                    -OPT-Expr: ExprSingle |
                               Expr.
                         Expr: ExprSingle, (",", s), ExprSingle++(",", s).
                  -ExprSingle: FLWORExpr11 |
                               QuantifiedExpr |
                               SwitchExpr |
                               TypeswitchExpr |
                               IfExpr |
                               TryCatchExpr |
                               OPT-OrExpr.
                  FLWORExpr11: InitialClause, IntermediateClause*, ReturnClause.
               -InitialClause: ForClause |
                               LetClause |
                               WindowClause.
          -IntermediateClause: InitialClause |
                               WhereClause |
                               WhileClause |
                               GroupByClause |
                               OrderByClause |
                               CountClause.
                    ForClause: -"for", RS, ForBinding++(",", s).
                  -ForBinding: ForItemBinding |
                               ForMemberBinding |
                               ForEntryBinding.
               ForItemBinding: VarNameAndType, AllowingEmpty?, PositionalVar?, -"in", s, ExprSingle.
                      VarName: -"$", s, OPT-EQName.
               VarNameAndType: -"$", s, OPT-EQName, TypeDeclaration?.
             ForMemberBinding: -"member", RS, VarNameAndType, PositionalVar?, -"in", s, ExprSingle.
                AllowingEmpty: -"allowing", RS, -"empty", RS.
              ForEntryBinding: (ForEntryKeyBinding, ForEntryValueBinding?; ForEntryValueBinding), PositionalVar?, -"in", s, ExprSingle.
           ForEntryKeyBinding: -"key", RS, VarNameAndType.
         ForEntryValueBinding: -"value", RS, VarNameAndType.
                PositionalVar: -"at", RS, VarName.
                    LetClause: -"let", RS, LetBinding++(",", s).
                   LetBinding: VarNameAndType, -":=", s, ExprSingle.
                 WindowClause: -"for", RS, (TumblingWindowClause; SlidingWindowClause).
         TumblingWindowClause: -"tumbling", RS, -"window", RS, VarNameAndType, -"in", s, ExprSingle, WindowStartCondition?, WindowEndCondition?.
          SlidingWindowClause: -"sliding", RS, -"window", RS, VarNameAndType, -"in", s, ExprSingle, WindowStartCondition?, WindowEndCondition.
         WindowStartCondition: -"start", RS, WindowVars, ("when", RS, ExprSingle)?.
           WindowEndCondition: ("only", RS)?, -"end", RS, WindowVars, ("when", RS, ExprSingle)?.
                   WindowVars: CurrentVar?, PositionalVar?, PreviousVar?, NextVar?.
                  -CurrentVar: VarName.
                  PreviousVar: -"previous", RS, VarName.
                      NextVar: -"next", RS, VarName.
                  CountClause: -"count", RS, VarName.
                  WhereClause: -"where", RS, ExprSingle.
                  WhileClause: -"while", RS, ExprSingle.
                GroupByClause: -"group", RS, -"by", RS, GroupingSpec++(",", s).
                 GroupingSpec: VarName, (TypeDeclaration?, -":=", s, ExprSingle)?, ("collation", RS, URILiteral)?.
                OrderByClause: ("stable", RS)?, -"order", RS, -"by", RS, OrderSpec, (-",", s, OrderSpec)*.
                    OrderSpec: ExprSingle, OrderModifier.
                OrderModifier: ("ascending", s; "descending", s)?, ("empty", RS, ("greatest", s; "least", s))?, ("collation", RS, URILiteral)?.
                 ReturnClause: -"return", RS, ExprSingle.
               QuantifiedExpr: SomeOrEvery, QuantifierBinding, (-",", s, QuantifierBinding)*, RS1, -"satisfies", RS, ExprSingle.
                 @SomeOrEvery: "some", RS |
                               "every", RS.
            QuantifierBinding: VarNameAndType, -"in", s, ExprSingle.
                   SwitchExpr: -"switch", s, SwitchComparand?, (SwitchCases; BracedSwitchCases).
              SwitchComparand: -"(", s, OPT-Expr, -")", s.
                  SwitchCases: SwitchCaseClause+, -"default", RS, -"return", RS, ExprSingle.
            BracedSwitchCases: -"{", s, SwitchCases, -"}", s.
             SwitchCaseClause: ("case", RS, SwitchCaseOperand)+, -"return", RS, ExprSingle.
           -SwitchCaseOperand: OPT-Expr.
               TypeswitchExpr: -"typeswitch", s, -"(", s, OPT-Expr, -")", s, (TypeswitchCases; BracedTypeswitchCases).
              TypeswitchCases: CaseClause+, -"default", RS, VarName?, -"return", RS, ExprSingle.
        BracedTypeswitchCases: -"{", s, TypeswitchCases, -"}", s.
                   CaseClause: -"case", RS, (VarName, -"as", RS)?, REP-SequenceTypeUnion, -"return", RS, ExprSingle.
       -REP-SequenceTypeUnion: SequenceType |
                               SequenceTypeUnion.
            SequenceTypeUnion: SequenceType, (-"|", s, SequenceType)+.
                       IfExpr: -"if", s, -"(", s, OPT-Expr, -")", s, (UnbracedActions; BracedActions).
              UnbracedActions: -"then", RS, ExprSingle, RS1, -"else", RS, ExprSingle.
                BracedActions: ThenAction, ElseIfAction*, ElseAction?.
                   ThenAction: EnclosedExpr, s.
                 ElseIfAction: RS1, -"else", RS, -"if", s, -"(", s, OPT-Expr, -")", s, EnclosedExpr, s.
                   ElseAction: RS1, -"else", RS, EnclosedExpr, s.
                 TryCatchExpr: TryClause, CatchClause+.
                    TryClause: -"try", RS, EnclosedExpr, s.
                  CatchClause: -"catch", RS, REP-NameTestUnion, EnclosedExpr, s.
           -REP-NameTestUnion: NameTest |
                               NameTestUnion.
                NameTestUnion: NameTest, (-"|", s, NameTest)+.
                  -OPT-OrExpr: OPT-AndExpr |
                               OrExpr.
                       OrExpr: OPT-AndExpr, RS1, -"or", RS, OPT-OrExpr.
                 -OPT-AndExpr: OPT-ComparisonExpr |
                               AndExpr.
                      AndExpr: OPT-ComparisonExpr, RS1, -"and", RS, OPT-AndExpr.
          -OPT-ComparisonExpr: OPT-OtherwiseExpr |
                               ComparisonExpr.
               ComparisonExpr: OPT-OtherwiseExpr, (ValueComp; GeneralComp; NodeComp), OPT-ComparisonExpr.
           -OPT-OtherwiseExpr: OPT-StringConcatExpr |
                               OtherwiseExpr.
                OtherwiseExpr: OPT-StringConcatExpr, RS1, -"otherwise", RS, OPT-OtherwiseExpr.
        -OPT-StringConcatExpr: OPT-RangeExpr |
                               StringConcatExpr.
             StringConcatExpr: OPT-RangeExpr, -"||", s, OPT-StringConcatExpr.
               -OPT-RangeExpr: OPT-AdditiveExpr |
                               RangeExpr.
                    RangeExpr: OPT-AdditiveExpr, -"to", RS, OPT-AdditiveExpr.
            -OPT-AdditiveExpr: OPT-MultiplicativeExpr |
                               AdditiveExpr.
                 AdditiveExpr: OPT-MultiplicativeExpr, AdditiveOps, OPT-AdditiveExpr.
                 @AdditiveOps: "+", s |
                               "-", RS.
      -OPT-MultiplicativeExpr: OPT-UnionExpr |
                               MultiplicativeExpr.
           MultiplicativeExpr: OPT-UnionExpr, MultiplicativeOps, OPT-MultiplicativeExpr.
           @MultiplicativeOps: "*", s |
                               "×", s |
                               RS1, "div", RS |
                               "÷", s |
                               RS1, "idiv", RS |
                               RS1, "mod", RS.
               -OPT-UnionExpr: OPT-IntersectExceptExpr |
                               UnionExpr.
                    UnionExpr: OPT-IntersectExceptExpr, (RS1, -"union", RS; -"|", s), OPT-UnionExpr.
     -OPT-IntersectExceptExpr: OPT-InstanceofExpr |
                               IntersectExceptExpr.
          IntersectExceptExpr: OPT-InstanceofExpr, IntersectOps, OPT-IntersectExceptExpr.
                @IntersectOps: RS1, "intersect", RS |
                               RS1, "except", RS.
          -OPT-InstanceofExpr: OPT-TreatExpr |
                               InstanceofExpr.
               InstanceofExpr: OPT-TreatExpr, RS1, -"instance", RS, -"of", RS, SequenceType.
               -OPT-TreatExpr: OPT-CastableExpr |
                               TreatExpr.
                    TreatExpr: OPT-CastableExpr, -"treat", RS, -"as", RS, SequenceType.
            -OPT-CastableExpr: OPT-CastExpr |
                               CastableExpr.
                 CastableExpr: OPT-CastExpr, RS1, -"castable", RS, -"as", RS, CastTarget, ("?", s)?.
                -OPT-CastExpr: OPT-ArrowExpr |
                               CastExpr.
                     CastExpr: OPT-ArrowExpr, RS1, -"cast", RS, -"as", RS, CastTarget, ("?", s)?.
               -OPT-ArrowExpr: OPT-UnaryExpr |
                               ArrowExpr.
                    ArrowExpr: OPT-UnaryExpr, (SequenceArrowTarget; MappingArrowTarget; LookupArrowTarget)+.
               -OPT-UnaryExpr: ValueExpr |
                               UnaryExpr.
                    UnaryExpr: UnaryExprOps+, ValueExpr.
                 UnaryExprOps: "-"; "+".
                   -ValueExpr: ValidateExpr |
                               ExtensionExpr |
                               REP-SimpleMapExpr.
          SequenceArrowTarget: -"=", -[">";#FF1E], s, ArrowTarget.
           MappingArrowTarget: -"=", -"!", -[">";#FF1E], s, ArrowTarget.
                  ArrowTarget: ArrowStaticFunction, ArgumentList |
                               ArrowDynamicFunction, PositionalArgumentList.
            LookupArrowTarget: -"=", -"?", -[">";#FF1E], s, NCName, PositionalArgumentList.
                 @GeneralComp: "=", s |
                               "!=", s |
                               ["<";#FF1C], s |
                               ["<";#FF1C], "=", s |
                               [">";#FF1E], s |
                               [">";#FF1E], "=", s.
                   @ValueComp: RS1, "eq", RS |
                               RS1, "ne", RS |
                               RS1, "lt", RS |
                               RS1, "le", RS |
                               RS1, "gt", RS |
                               RS1, "ge", RS.
                    @NodeComp: RS1, "is", RS |
                               ["<";#FF1C], ["<";#FF1C], s |
                               [">";#FF1E], [">";#FF1E], s.
                 ValidateExpr: -"validate", s, (ValidationMode; "type", RS, TypeName)?, -"{", s, OPT-Expr, -"}", s.
              @ValidationMode: "lax", s |
                               "strict", s.
                ExtensionExpr: Pragma+, -"{", s, OPT-Expr?, -"}", s.
                       Pragma: -"(#", S?, OPT-EQName, (S, PragmaContents)?, -"#)", s.
 {PragmaContents replaced} 
               PragmaContents: ("#", s, ~[")"]; ~["#"])+.
           -REP-SimpleMapExpr: OPT-PathExpr |
                               SimpleMapExpr.
                SimpleMapExpr: OPT-PathExpr, (-"!", s, OPT-PathExpr)+.
                -OPT-PathExpr: REP-RelativePathExpr |
                               PathExpr.
                     PathExpr: "/", s, REP-RelativePathExpr? |
                               "//", s, REP-RelativePathExpr.
        -REP-RelativePathExpr: StepExpr |
                               RelativePathExpr.
             RelativePathExpr: StepExpr, (("/", s; "//", s), StepExpr)+.
                    -StepExpr: PostfixExpr |
                               AxisStep.
                     AxisStep: (OPT-ReverseStep; OPT-ForwardStep), Predicate*.
             -OPT-ForwardStep: OPT-AbbrevForwardStep |
                               ForwardStep.
                  ForwardStep: ForwardAxis, NodeTest.
                 @ForwardAxis: ("attribute", s; "child", s; "descendant", s; "descendant-or-self", s; "following", s; "following-or-self", s; "following-sibling", s; "following-sibling-or-self", s; "self", s), -"::", s.
       -OPT-AbbrevForwardStep: SimpleNodeTest |
                               AbbrevForwardStep.
            AbbrevForwardStep: "@", s, NodeTest.
             -OPT-ReverseStep: AbbrevReverseStep |
                               ReverseStep.
                  ReverseStep: ReverseAxis, NodeTest.
                 @ReverseAxis: ("ancestor", s; "ancestor-or-self", s; "parent", s; "preceding", s; "preceding-or-self", s; "preceding-sibling-or-self", s), -"::", s.
            AbbrevReverseStep: -"..", s.
                    -NodeTest: UnionNodeTest |
                               SimpleNodeTest.
                UnionNodeTest: -"(", s, SimpleNodeTest, (-"|", s, SimpleNodeTest)*, -")", s.
              -SimpleNodeTest: KindTest |
                               NameTest.
                    -NameTest: OPT-EQName |
                               Wildcard.
                     Wildcard: "*", s |
                               REP-NCNameTok, ":*", s |
                               "*:", REP-NCNameTok, s |
                               BracedURILiteral, "*", s.
                   FilterExpr: PostfixExpr, Predicate.
                 -PostfixExpr: PrimaryExpr |
                               FilterExpr |
                               DynamicFunctionCall |
                               LookupExpr |
                               FilterExprAM.
          DynamicFunctionCall: PostfixExpr, PositionalArgumentList.
                 ArgumentList: -"(", s, (OPT-PositionalArguments, (-",", s, OPT-KeywordArguments)?; OPT-KeywordArguments)?, -")", s.
       PositionalArgumentList: -"(", s, OPT-PositionalArguments?, -")", s.
     -OPT-PositionalArguments: Argument |
                               PositionalArguments.
          PositionalArguments: Argument, (",", s), Argument++(",", s).
        -OPT-KeywordArguments: KeywordArgument |
                               KeywordArguments.
             KeywordArguments: KeywordArgument, (",", s), KeywordArgument++(",", s).
              KeywordArgument: OPT-EQName, -":=", s, Argument.
                    Predicate: -"[", s, OPT-Expr, -"]", s.
                   LookupExpr: PostfixExpr, Lookup.
                 FilterExprAM: PostfixExpr, -"?[", s, OPT-Expr, -"]", s.
                       Lookup: ("?", s; "??", s), (Modifier, -"::", s)?, KeySpecifier.
                     Modifier: "pairs", RS |
                               "keys", RS |
                               "values", RS |
                               "items", RS.
                -KeySpecifier: NCName |
                               IntegerLiteral |
                               StringLiteral |
                               VarRef |
                               ParenthesizedExpr |
                               LookupWildcard.
               LookupWildcard: -"*", s.
         -ArrowStaticFunction: OPT-EQName.
        -ArrowDynamicFunction: VarRef |
                               InlineFunctionExpr |
                               ParenthesizedExpr.
                 -PrimaryExpr: Literal |
                               VarRef |
                               ParenthesizedExpr |
                               ContextValueRef |
                               FunctionCall |
                               OrderedExpr |
                               UnorderedExpr |
                               NodeConstructor |
                               FunctionItemExpr |
                               MapConstructor |
                               ArrayConstructor |
                               StringTemplate |
                               StringConstructor |
                               UnaryLookup.
                     -Literal: NumericLiteral |
                               StringLiteral.
              -NumericLiteral: IntegerLiteral |
                               HexIntegerLiteral |
                               BinaryIntegerLiteral |
                               DecimalLiteral |
                               DoubleLiteral.
                       VarRef: -"$", s, OPT-EQName.
            ParenthesizedExpr: -"(", s, OPT-Expr?, -")", s.
              ContextValueRef: -".", s.
                  OrderedExpr: -"ordered", s, EnclosedExpr, s.
                UnorderedExpr: -"unordered", s, EnclosedExpr, s.
                 FunctionCall: OPT-EQName, ArgumentList.
                    -Argument: ExprSingle |
                               ArgumentPlaceholder.
          ArgumentPlaceholder: -"?", s.
              NodeConstructor: DirectConstructor, s |
                               ComputedConstructor, s.
           -DirectConstructor: DirElemConstructor |
                               DirCommentConstructor |
                               DirPIConstructor.
 {DirElemConstructor replaced} 
           DirElemConstructor: -"<", QNameToken, DirAttributeList, s, (-"/>"; -">", DirElemContent*, -"</", QNameTokenClose, s, -">").
 {DirAttributeList replaced} 
             DirAttributeList: DirAttribute*.
            DirAttributeValue: -'"', (EscapeQuot; QuotAttrValueContent)*, -'"' |
                               -"'", (EscapeApos; AposAttrValueContent)*, -"'".
        -QuotAttrValueContent: QuotAttrContentChar |
                               CommonContent.
        -AposAttrValueContent: AposAttrContentChar |
                               CommonContent.
              -DirElemContent: DirectConstructor |
                               CDataSection |
                               CommonContent |
                               ElementContentChar.
                CommonContent: PredefinedEntityRef |
                               CharRef |
                               "{{" |
                               "}}" |
                               EnclosedExpr.
        DirCommentConstructor: -"<!--", DirCommentContents, -"-->".
 {DirCommentContents replaced} 
           DirCommentContents: (~["-"]; "-", s, ~["-"])*.
             DirPIConstructor: -"<?", PITarget, (S, DirPIContents)?, -"?>".
 {DirPIContents replaced} 
                DirPIContents:  {WS} ("?", ~[">"]; ~["?"])*.
                 CDataSection: -"<![CDATA[", CDataSectionContents, -"]]>".
 {CDataSectionContents replaced} 
         CDataSectionContents:  {WS} ~[]*.
         -ComputedConstructor: CompDocConstructor |
                               CompElemConstructor |
                               CompAttrConstructor |
                               CompNamespaceConstructor |
                               CompTextConstructor |
                               CompCommentConstructor |
                               CompPIConstructor.
           CompDocConstructor: -"document", s, EnclosedExpr.
          CompElemConstructor: -"element", s, OPT-CompNodeName, EnclosedContentExpr.
            -OPT-CompNodeName: StringLiteral |
                               UnreservedName |
                               CompNodeName.
                 CompNodeName: -"{", s, OPT-Expr, -"}", s.
          -OPT-CompNodeNCName: StringLiteral |
                               UnreservedNCName |
                               CompNodeNCName.
               CompNodeNCName: -"{", s, OPT-Expr, -"}", s.
              -UnreservedName: OPT-EQName.
            -UnreservedNCName: NCName.
         -EnclosedContentExpr: EnclosedExpr.
          CompAttrConstructor: -"attribute", s, OPT-CompNodeName, EnclosedExpr.
     CompNamespaceConstructor: -"namespace", s, OPT-CompNodeNCName, EnclosedExpr.
          CompTextConstructor: -"text", s, EnclosedExpr.
       CompCommentConstructor: -"comment", s, EnclosedExpr.
            CompPIConstructor: -"processing-instruction", s, OPT-CompNodeNCName, EnclosedExpr.
            -FunctionItemExpr: NamedFunctionRef |
                               InlineFunctionExpr.
             NamedFunctionRef: OPT-EQName, -"#", s, IntegerLiteral.
           InlineFunctionExpr: Annotation*, (-"function", s; -"fn", s), FunctionSignature?, FunctionBody.
               MapConstructor: (-"map", s)?, -"{", s, MapConstructorEntry**(",", s), -"}", s.
          MapConstructorEntry: MapKeyExpr, -":", s, MapValueExpr.
                  -MapKeyExpr: ExprSingle.
                -MapValueExpr: ExprSingle.
            -ArrayConstructor: SquareArrayConstructor |
                               CurlyArrayConstructor.
       SquareArrayConstructor: -"[", s, ExprSingle**(",", s), -"]", s.
        CurlyArrayConstructor: -"array", s, EnclosedExpr, s.
 {StringTemplate replaced} 
               StringTemplate:  {WS} -"`", StringTemplateContent?, -"`", s.
 {StringTemplateFixedPart replaced} 
      StringTemplateFixedPart: (("{{"; "}}"; "``"); ~["`{}"])+.
 {StringTemplateVariablePart replaced} 
  ^StringTemplateVariablePart: EnclosedExpr.
            StringConstructor: -"``[", REP-StringConstructorContent, -"]``", s.
-REP-StringConstructorContent: StringConstructorChars |
                               StringConstructorContent.
     StringConstructorContent: StringConstructorChars, (StringInterpolation, StringConstructorChars)+.
 {StringConstructorChars replaced} 
       StringConstructorChars:  {WS} ("`", ~["{"]; "]", (~["`"]; "`", ~["`"]); ~["`"])*.
          StringInterpolation: -"`{", OPT-Expr?, -"}`".
                  UnaryLookup: ("?", s; "??", s), (Modifier, -"::", s)?, KeySpecifier.
              TypeDeclaration: -"as", RS, SequenceType.
                 SequenceType: -"empty-sequence", s, -"(", s, -")", s |
                               ItemType, OccurrenceIndicator?.
         @OccurrenceIndicator: "?", s |
                               "*", s |
                               "+", s.
                    -ItemType: AnyItemTest |
                               TypeName |
                               KindTest |
                               FunctionType |
                               MapType |
                               ArrayType |
                               RecordType |
                               EnumerationType |
                               ChoiceItemType.
                  AnyItemTest: -"item", s, -"(", s, -")", s.
                    -KindTest: DocumentTest |
                               ElementTest |
                               AttributeTest |
                               SchemaElementTest |
                               SchemaAttributeTest |
                               PITest |
                               CommentTest |
                               TextTest |
                               NamespaceNodeTest |
                               AnyKindTest.
                  AnyKindTest: -"node", s, -"(", s, -")", s.
                 DocumentTest: -"document-node", s, -"(", s, (ElementTest; SchemaElementTest)?, -")", s.
                     TextTest: -"text", s, -"(", s, -")", s.
                  CommentTest: -"comment", s, -"(", s, -")", s.
            NamespaceNodeTest: -"namespace-node", s, -"(", s, -")", s.
                       PITest: -"processing-instruction", s, -"(", s, (NCName; StringLiteral)?, -")", s.
                AttributeTest: -"attribute", s, -"(", s, (REP-NameTestUnion, (-",", s, TypeName)?)?, -")", s.
          SchemaAttributeTest: -"schema-attribute", s, -"(", s, AttributeName, -")", s.
                  ElementTest: -"element", s, -"(", s, (REP-NameTestUnion, (-",", s, TypeName, ("?", s)?)?)?, -")", s.
            SchemaElementTest: -"schema-element", s, -"(", s, ElementName, -")", s.
               -AttributeName: OPT-EQName.
                 -ElementName: OPT-EQName.
                  -CastTarget: TypeName |
                               ChoiceItemType |
                               EnumerationType.
                    -TypeName: OPT-EQName.
                 FunctionType: Annotation*, (AnyFunctionType; TypedFunctionType).
              AnyFunctionType: (-"function", s; -"fn", s), -"(", s, -"*", s, -")", s.
            TypedFunctionType: (-"function", s; -"fn", s), -"(", s, SequenceType**(",", s), -")", s, -"as", RS, SequenceType.
                     -MapType: AnyMapType |
                               TypedMapType.
                   AnyMapType: -"map", s, -"(", s, -"*", s, -")", s.
                 TypedMapType: -"map", s, -"(", s, ItemType, -",", s, SequenceType, -")", s.
                  -RecordType: AnyRecordType |
                               TypedRecordType.
                AnyRecordType: -"record", s, -"(", s, -"*", s, -")", s.
              TypedRecordType: -"record", s, -"(", s, FieldDeclaration++(",", s), ExtensibleFlag?, -")", s.
             FieldDeclaration: FieldName, ("?", s)?, (-"as", RS, SequenceType)?.
                   -FieldName: NCName |
                               StringLiteral.
               ExtensibleFlag: -",", s, -"*", s.
              EnumerationType: -"enum", s, -"(", s, StringLiteral++(",", s), -")", s.
                   -ArrayType: AnyArrayType |
                               TypedArrayType.
                 AnyArrayType: -"array", s, -"(", s, -"*", s, -")", s.
               TypedArrayType: -"array", s, -"(", s, SequenceType, -")", s.
               ChoiceItemType: -"(", s, ItemType++("|", s), -")", s.
                  -URILiteral: StringLiteral.
                  -OPT-EQName: QName |
                               EQName.
                       EQName: URIQualifiedName, s.
                      -NCName: QName.
                        QName: QNameToken, s.
               IntegerLiteral: Digits, s.
            HexIntegerLiteral: -"0x", HexDigits, s.
         BinaryIntegerLiteral: -"0b", BinaryDigits, s.
               DecimalLiteral: ".", Digits, s |
                               Digits, ".", Digits?, s.
                DoubleLiteral: (".", Digits; Digits, (".", Digits?)?), ["e";"E"], ["+";"-"]?, Digits, s.
               -StringLiteral: AposStringLiteral |
                               QuotStringLiteral.
            AposStringLiteral: -"'", (PredefinedEntityRef; CharRef; EscapeApos; ~["'";"&"])*, -"'", s.
            QuotStringLiteral: -'"', (PredefinedEntityRef; CharRef; EscapeQuot; ~['"';"&"])*, -'"', s.
             URIQualifiedName: BracedURILiteral, REP-NCNameTok.
             BracedURILiteral: -"Q", -"{", (PredefinedEntityRef; CharRef; ~["&";"{";"}"])*, -"}".
          PredefinedEntityRef: "&", ("lt"; "gt"; "amp"; "quot"; "apos"), -";".
                   EscapeQuot: -'""'.
                   EscapeApos: -"''".
 {ElementContentChar replaced} 
          -ElementContentChar: ~["{}<&"].
 {QuotAttrContentChar replaced} 
         -QuotAttrContentChar: ~['"{}<&'].
 {AposAttrContentChar replaced} 
         -AposAttrContentChar: ~["'{}<&"].
 {Comment replaced} 
                      Comment:  {WS} -"(:", CommentContents++Comment, ":"?, -":)".
                    -PITarget: REP-NCNameTok.
                      CharRef: "&#", (Digits; "x", HexDigits), -";".
 {QNameToken replaced} 
                  -QNameToken: (@REP-NCNameTok>prefix, -":", s)?, @REP-NCNameTok>local.
               -REP-NCNameTok: Nmstart |
                               NCNameTok.
                    NCNameTok: Nmstart, Nmchar+.
                            S: WhitespaceChar+.
                        -Char: [#0009;#000D;#000A;#0020-#FFFD].
                      -Digits: DecDigit, ((DecDigit; "_")*, DecDigit)?.
                    -DecDigit: ["0"-"9"].
                   -HexDigits: HexDigit, ((HexDigit; "_")*, HexDigit)?.
                    -HexDigit: ["0"-"9";"a"-"f";"A"-"F"].
                -BinaryDigits: BinaryDigit, ((BinaryDigit; "_")*, BinaryDigit)?.
                 -BinaryDigit: ["0";"1"].
 {CommentContents replaced} 
              CommentContents:  {WS} (~[":("]; ":", ~[")"]; "(", ~[":"])*.
              -WhitespaceChar: -[#0009;#000D;#000A;#0020].
                     -Nmstart: Letter |
                               "_".
                      -Nmchar: Letter |
                               CombiningChar |
                               Extender |
                               Digit |
                               "." |
                               "-" |
                               "_".
                      -Letter: BaseChar |
                               Ideographic.
                    -BaseChar: [#0041-#005a;#0061-#007a;#00c0-#00d6;#00d8-#00f6;#00f8-#00ff;#0100-#0131;#0134-#013e;#0141-#0148;#014a-#017e;#0180-#01c3;#01cd-#01f0;#01f4-#01f5;#01fa-#0217;#0250-#02a8;#02bb-#02c1;#0386;#0388-#038a;#038c;#038e-#03a1;#03a3-#03ce;#03d0-#03d6;#03da;#03dc;#03de;#03e0;#03e2-#03f3;#0401-#040c;#040e-#044f;#0451-#045c;#045e-#0481;#0490-#04c4;#04c7-#04c8;#04cb-#04cc;#04d0-#04eb;#04ee-#04f5;#04f8-#04f9;#0531-#0556;#0559;#0561-#0586;#05d0-#05ea;#05f0-#05f2;#0621-#063a;#0641-#064a;#0671-#06b7;#06ba-#06be;#06c0-#06ce;#06d0-#06d3;#06d5;#06e5-#06e6;#0905-#0939;#093d;#0958-#0961;#0985-#098c;#098f-#0990;#0993-#09a8;#09aa-#09b0;#09b2;#09b6-#09b9;#09dc-#09dd;#09df-#09e1;#09f0-#09f1;#0a05-#0a0a;#0a0f-#0a10;#0a13-#0a28;#0a2a-#0a30;#0a32-#0a33;#0a35-#0a36;#0a38-#0a39;#0a59-#0a5c;#0a5e;#0a72-#0a74;#0a85-#0a8b;#0a8d;#0a8f-#0a91;#0a93-#0aa8;#0aaa-#0ab0;#0ab2-#0ab3;#0ab5-#0ab9;#0abd;#0ae0;#0b05-#0b0c;#0b0f-#0b10;#0b13-#0b28;#0b2a-#0b30;#0b32-#0b33;#0b36-#0b39;#0b3d;#0b5c-#0b5d;#0b5f-#0b61;#0b85-#0b8a;#0b8e-#0b90;#0b92-#0b95;#0b99-#0b9a;#0b9c;#0b9e-#0b9f;#0ba3-#0ba4;#0ba8-#0baa;#0bae-#0bb5;#0bb7-#0bb9;#0c05-#0c0c;#0c0e-#0c10;#0c12-#0c28;#0c2a-#0c33;#0c35-#0c39;#0c60-#0c61;#0c85-#0c8c;#0c8e-#0c90;#0c92-#0ca8;#0caa-#0cb3;#0cb5-#0cb9;#0cde;#0ce0-#0ce1;#0d05-#0d0c;#0d0e-#0d10;#0d12-#0d28;#0d2a-#0d39;#0d60-#0d61;#0e01-#0e2e;#0e30;#0e32-#0e33;#0e40-#0e45;#0e81-#0e82;#0e84;#0e87-#0e88;#0e8a;#0e8d;#0e94-#0e97;#0e99-#0e9f;#0ea1-#0ea3;#0ea5;#0ea7;#0eaa-#0eab;#0ead-#0eae;#0eb0;#0eb2-#0eb3;#0ebd;#0ec0-#0ec4;#0f40-#0f47;#0f49-#0f69;#10a0-#10c5;#10d0-#10f6;#1100;#1102-#1103;#1105-#1107;#1109;#110b-#110c;#110e-#1112;#113c;#113e;#1140;#114c;#114e;#1150;#1154-#1155;#1159;#115f-#1161;#1163;#1165;#1167;#1169;#116d-#116e;#1172-#1173;#1175;#119e;#11a8;#11ab;#11ae-#11af;#11b7-#11b8;#11ba;#11bc-#11c2;#11eb;#11f0;#11f9;#1e00-#1e9b;#1ea0-#1ef9;#1f00-#1f15;#1f18-#1f1d;#1f20-#1f45;#1f48-#1f4d;#1f50-#1f57;#1f59;#1f5b;#1f5d;#1f5f-#1f7d;#1f80-#1fb4;#1fb6-#1fbc;#1fbe;#1fc2-#1fc4;#1fc6-#1fcc;#1fd0-#1fd3;#1fd6-#1fdb;#1fe0-#1fec;#1ff2-#1ff4;#1ff6-#1ffc;#2126;#212a-#212b;#212e;#2180-#2182;#3041-#3094;#30a1-#30fa;#3105-#312c;#ac00-#d7a3].
                  Ideographic: [#4e00-#9fa5;#3007;#3021-#3029].
                CombiningChar: [#0300-#0345;#0360-#0361;#0483-#0486;#0591-#05a1;#05a3-#05b9;#05bb-#05bd;#05bf;#05c1-#05c2;#05c4;#064b-#0652;#0670;#06d6-#06dc;#06dd-#06df;#06e0-#06e4;#06e7-#06e8;#06ea-#06ed;#0901-#0903;#093c;#093e-#094c;#094d;#0951-#0954;#0962-#0963;#0981-#0983;#09bc;#09be;#09bf;#09c0-#09c4;#09c7-#09c8;#09cb-#09cd;#09d7;#09e2-#09e3;#0a02;#0a3c;#0a3e;#0a3f;#0a40-#0a42;#0a47-#0a48;#0a4b-#0a4d;#0a70-#0a71;#0a81-#0a83;#0abc;#0abe-#0ac5;#0ac7-#0ac9;#0acb-#0acd;#0b01-#0b03;#0b3c;#0b3e-#0b43;#0b47-#0b48;#0b4b-#0b4d;#0b56-#0b57;#0b82-#0b83;#0bbe-#0bc2;#0bc6-#0bc8;#0bca-#0bcd;#0bd7;#0c01-#0c03;#0c3e-#0c44;#0c46-#0c48;#0c4a-#0c4d;#0c55-#0c56;#0c82-#0c83;#0cbe-#0cc4;#0cc6-#0cc8;#0cca-#0ccd;#0cd5-#0cd6;#0d02-#0d03;#0d3e-#0d43;#0d46-#0d48;#0d4a-#0d4d;#0d57;#0e31;#0e34-#0e3a;#0e47-#0e4e;#0eb1;#0eb4-#0eb9;#0ebb-#0ebc;#0ec8-#0ecd;#0f18-#0f19;#0f35;#0f37;#0f39;#0f3e;#0f3f;#0f71-#0f84;#0f86-#0f8b;#0f90-#0f95;#0f97;#0f99-#0fad;#0fb1-#0fb7;#0fb9;#20d0-#20dc;#20e1;#302a-#302f;#3099;#309a].
                       -Digit: [#0030-#0039;#0660-#0669;#06f0-#06f9;#0966-#096f;#09e6-#09ef;#0a66-#0a6f;#0ae6-#0aef;#0b66-#0b6f;#0be7-#0bef;#0c66-#0c6f;#0ce6-#0cef;#0d66-#0d6f;#0e50-#0e59;#0ed0-#0ed9;#0f20-#0f29].
                     Extender: [#00b7;#02d0;#02d1;#0387;#0640;#0e46;#0ec6;#3005;#3031-#3035;#309d-#309e;#30fc-#30fe].
       -StringTemplateContent:  {EXTRA} StringTemplateFixedPart |
                               StringTemplateVariablePart |
                               StringTemplateVariablePart, StringTemplateContent |
                               StringTemplateFixedPart, StringTemplateVariablePart, StringTemplateContent?.
                 DirAttribute:  {EXTRA} (RS, QNameToken, s, -"=", s, DirAttributeValue).
             -QNameTokenClose:  {EXTRA} (@REP-NCNameTok>prefixClose, -":", s)?, @REP-NCNameTok>localClose.
                         -WSC: WhitespaceChar |
                               Comment.
                           -s: WSC*.
                          -RS: WSC+.
                         -RS1: WhitespaceChar |
                               Comment.
